---
export interface StatBoxProps {
  stats: Array<{
    value: string;
    label: string;
    icon?: string;
    highlight?: boolean;
    source?: {
      text: string;
      url?: string;
    };
  }>;
  title?: string;
  description?: string;
  className?: string;
  layout?: 'grid' | 'inline' | 'compact';
  schema?: boolean;
}

const {
  stats,
  title,
  description,
  className = "",
  layout = 'grid',
  schema = true
} = Astro.props as StatBoxProps;

// Generate ClaimReview schema for cited statistics
const claimSchemas = schema ? stats
  .filter(stat => stat.source)
  .map(stat => ({
    "@context": "https://schema.org",
    "@type": "ClaimReview",
    "claimReviewed": `${stat.value} ${stat.label}`,
    "itemReviewed": {
      "@type": "Claim",
      "author": {
        "@type": "Organization",
        "name": stat.source?.text || "Industry Report"
      }
    },
    "reviewRating": {
      "@type": "Rating",
      "ratingValue": 5,
      "bestRating": 5
    },
    "author": {
      "@type": "Organization",
      "name": "CCTV Trailer"
    }
  })) : [];

const schemaScript = claimSchemas.length > 0 ?
  JSON.stringify(claimSchemas.length === 1 ? claimSchemas[0] : claimSchemas) : null;
---

<div class={`stat-box-wrapper ${className}`}>
  {title && <h3 class="text-2xl font-bold text-center mb-2">{title}</h3>}
  {description && <p class="text-gray-600 text-center mb-6">{description}</p>}

  {layout === 'grid' && (
    <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
      {stats.map(stat => (
        <div class={`stat-item text-center p-4 rounded-lg ${
          stat.highlight ? 'bg-gradient-to-br from-blue-50 to-white border-2 border-blue-200' : 'bg-gray-50'
        }`}>
          {stat.icon && (
            <div class="text-3xl mb-2">{stat.icon}</div>
          )}
          <div class={`text-3xl font-bold mb-1 ${
            stat.highlight ? 'text-blue-600' : 'text-gray-900'
          }`}>
            {stat.value}
          </div>
          <div class="text-sm text-gray-600">{stat.label}</div>
          {stat.source && (
            <div class="mt-2 text-xs text-gray-500">
              {stat.source.url ? (
                <a href={stat.source.url} target="_blank" rel="noopener noreferrer" class="underline hover:text-blue-600">
                  {stat.source.text}
                </a>
              ) : (
                <span>{stat.source.text}</span>
              )}
            </div>
          )}
        </div>
      ))}
    </div>
  )}

  {layout === 'inline' && (
    <div class="flex flex-wrap justify-center gap-8">
      {stats.map(stat => (
        <div class={`stat-item flex items-center gap-3 px-6 py-3 rounded-full ${
          stat.highlight ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white' : 'bg-gray-100'
        }`}>
          {stat.icon && (
            <span class="text-2xl">{stat.icon}</span>
          )}
          <div>
            <span class={`text-2xl font-bold ${
              stat.highlight ? 'text-white' : 'text-gray-900'
            }`}>
              {stat.value}
            </span>
            <span class={`ml-2 ${
              stat.highlight ? 'text-blue-100' : 'text-gray-600'
            }`}>
              {stat.label}
            </span>
          </div>
          {stat.source && (
            <div class="ml-2 text-xs opacity-75">
              *
            </div>
          )}
        </div>
      ))}
    </div>
  )}

  {layout === 'compact' && (
    <div class="bg-gradient-to-r from-gray-800 to-gray-900 text-white rounded-lg p-6">
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4 divide-x divide-gray-700">
        {stats.map((stat, index) => (
          <div class={`stat-item text-center ${index > 0 ? 'pl-4' : ''}`}>
            {stat.icon && (
              <span class="text-2xl mb-1 block">{stat.icon}</span>
            )}
            <div class="text-2xl font-bold text-yellow-400">
              {stat.value}
            </div>
            <div class="text-xs text-gray-300 uppercase tracking-wide">
              {stat.label}
            </div>
            {stat.source && (
              <div class="mt-1 text-xs text-gray-500">
                {stat.source.url ? (
                  <a href={stat.source.url} target="_blank" rel="noopener noreferrer" class="underline hover:text-yellow-400">
                    †
                  </a>
                ) : (
                  <span>†</span>
                )}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  )}

  {/* Source citations if any */}
  {stats.some(stat => stat.source) && (
    <div class="mt-4 text-xs text-gray-500 text-center">
      {stats.filter(stat => stat.source).map((stat, index) => (
        <div key={index}>
          {stat.source?.url ? (
            <>
              * {stat.value} {stat.label}: <a href={stat.source.url} target="_blank" rel="noopener noreferrer" class="underline hover:text-blue-600">{stat.source.text}</a>
            </>
          ) : (
            <>* {stat.value} {stat.label}: {stat.source?.text}</>
          )}
        </div>
      ))}
    </div>
  )}
</div>

{schema && schemaScript && (
  <script type="application/ld+json" set:html={schemaScript} />
)}

<style>
  @keyframes pulse {
    0%, 100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
  }

  .stat-item:hover {
    animation: pulse 0.5s ease-in-out;
  }
</style>