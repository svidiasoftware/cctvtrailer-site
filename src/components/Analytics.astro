---
// Analytics tracking component for forms and interactions
---

<script is:inline>
  // Progressive enhancement - only runs if JS is available
  // Does not block page rendering or affect SEO
  if (typeof window !== 'undefined') {
    // Function to initialize analytics when gtag is ready
    function initializeAnalytics() {
      // Debug logging in development
      const isDev = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
      
      function log(message, data) {
        if (isDev) {
          console.log(`[Analytics] ${message}`, data || '');
        }
      }
      
      log('Initializing analytics tracking');
      
      // Track phone number clicks
      const phoneLinks = document.querySelectorAll('a[href^="tel:"]');
      log(`Found ${phoneLinks.length} phone links`);
      
      phoneLinks.forEach(link => {
        link.addEventListener('click', () => {
          const phoneNumber = link.getAttribute('href');
          log('Phone click detected', phoneNumber);
          
          if (typeof gtag !== 'undefined') {
            gtag('event', 'phone_click', {
              phone_number: phoneNumber,
              engagement_type: 'phone_call'
            });
            log('Phone click event sent to GA', phoneNumber);
          } else {
            log('Warning: gtag not available for phone click tracking');
          }
        });
      });

      // Track email clicks
      const emailLinks = document.querySelectorAll('a[href^="mailto:"]');
      log(`Found ${emailLinks.length} email links`);
      
      emailLinks.forEach(link => {
        link.addEventListener('click', () => {
          const email = link.getAttribute('href');
          log('Email click detected', email);
          
          if (typeof gtag !== 'undefined') {
            gtag('event', 'email_click', {
              email_address: email,
              engagement_type: 'email'
            });
            log('Email click event sent to GA', email);
          } else {
            log('Warning: gtag not available for email click tracking');
          }
        });
      });

      // Track form submissions
      const forms = document.querySelectorAll('form');
      log(`Found ${forms.length} forms`);
      
      forms.forEach(form => {
        form.addEventListener('submit', (e) => {
          const formId = form.getAttribute('id') || 'unnamed_form';
          log('Form submission detected', formId);
          
          if (typeof gtag !== 'undefined') {
            gtag('event', 'form_submission', {
              form_id: formId,
              form_type: formId.includes('quote') ? 'quote' : (formId.includes('contact') ? 'contact' : 'other')
            });
            log('Form submission event sent to GA', formId);
            
            // Track as quote_request if it's a quote form
            if (formId.includes('quote')) {
              gtag('event', 'quote_request', {
                form_id: formId,
                request_type: 'quote'
              });
              log('Quote request event sent to GA', formId);
            }
            
            // Track as conversion if it's a quote or contact form
            if (formId.includes('quote') || formId.includes('contact')) {
              gtag('event', 'conversion', {
                conversion_type: formId.includes('quote') ? 'quote_form' : 'contact_form',
                form_id: formId
              });
              log('Conversion event sent to GA', formId);
            }
          } else {
            log('Warning: gtag not available for form tracking');
          }
        });
      });

    // Track CTA button clicks
    const ctaButtons = document.querySelectorAll('.bg-blue-600, .bg-green-600, .bg-blue-700');
    ctaButtons.forEach(button => {
      button.addEventListener('click', () => {
        const buttonText = button.textContent || button.innerText;
        if (typeof gtag !== 'undefined') {
          gtag('event', 'cta_click', {
            event_category: 'engagement',
            event_label: buttonText.trim(),
            value: 1
          });
        }
      });
    });

    // Track pricing calculator usage
    const pricingInputs = document.querySelectorAll('#calc-duration, #calc-units, #calc-location, #calc-urgent');
    pricingInputs.forEach(input => {
      input.addEventListener('change', () => {
        if (typeof gtag !== 'undefined') {
          gtag('event', 'pricing_calculator_interaction', {
            event_category: 'calculator',
            event_label: input.id,
            value: input.value
          });
        }
      });
    });

    // Track outbound links
    const externalLinks = document.querySelectorAll('a[href^="http"]:not([href*="cctvtrailer.com"])');
    externalLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (typeof gtag !== 'undefined') {
          gtag('event', 'outbound_click', {
            event_category: 'engagement',
            event_label: link.getAttribute('href'),
            transport_type: 'beacon'
          });
        }
      });
    });

    // Track scroll depth (25%, 50%, 75%, 90%, 100%)
    let scrollDepthTracked = {25: false, 50: false, 75: false, 90: false, 100: false};
    
    function trackScrollDepth() {
      const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;
      const scrolled = window.scrollY;
      const scrollPercentage = Math.round((scrolled / scrollHeight) * 100);
      
      [25, 50, 75, 90, 100].forEach(depth => {
        if (scrollPercentage >= depth && !scrollDepthTracked[depth]) {
          scrollDepthTracked[depth] = true;
          if (typeof gtag !== 'undefined') {
            gtag('event', 'scroll_depth', {
              event_category: 'engagement',
              event_label: `${depth}%`,
              value: depth
            });
          }
        }
      });
    }
    
    // Throttle scroll tracking
    let scrollTimer;
    window.addEventListener('scroll', () => {
      if (scrollTimer) clearTimeout(scrollTimer);
      scrollTimer = setTimeout(trackScrollDepth, 100);
    });

    // Track time on page (every 30 seconds)
    let timeOnPage = 0;
    setInterval(() => {
      timeOnPage += 30;
      if (typeof gtag !== 'undefined' && timeOnPage % 60 === 0) {
        gtag('event', 'time_on_page', {
          event_category: 'engagement',
          event_label: `${timeOnPage} seconds`,
          value: timeOnPage
        });
      }
    }, 30000);

      // Track page visibility changes
      document.addEventListener('visibilitychange', () => {
        if (typeof gtag !== 'undefined') {
          gtag('event', 'visibility_change', {
            event_category: 'engagement',
            event_label: document.hidden ? 'hidden' : 'visible'
          });
        }
      });
      
      log('Analytics initialization complete');
    }
    
    // Wait for gtag to be available before initializing
    function waitForGtag() {
      if (typeof gtag !== 'undefined') {
        // gtag is ready, initialize analytics
        initializeAnalytics();
      } else {
        // Check again in 100ms
        setTimeout(waitForGtag, 100);
      }
    }
    
    // Start when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', waitForGtag);
    } else {
      // DOM is already loaded
      waitForGtag();
    }
  }
</script>