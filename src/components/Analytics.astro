---
// Analytics tracking component for forms and interactions
---

<script is:inline>
  // Defer analytics initialization until user interaction or idle
  if (typeof window !== 'undefined') {
    let analyticsInitialized = false;

    // Function to initialize analytics when gtag is ready
    function initializeAnalytics() {
      if (analyticsInitialized) return;
      analyticsInitialized = true;

      // Debug logging in development
      const isDev = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';

      function log(message, data) {
        if (isDev) {
          console.log(`[Analytics] ${message}`, data || '');
        }
      }

      log('Initializing analytics tracking');
      
      // Track phone number clicks
      const phoneLinks = document.querySelectorAll('a[href^="tel:"]');
      log(`Found ${phoneLinks.length} phone links`);
      
      phoneLinks.forEach(link => {
        link.addEventListener('click', () => {
          const phoneNumber = link.getAttribute('href');
          log('Phone click detected', phoneNumber);
          
          if (typeof window.dataLayer !== 'undefined') {
            window.dataLayer.push({
              'event': 'phone_click',
              'phone_number': phoneNumber,
              'engagement_type': 'phone_call'
            });
            log('Phone click event sent to GTM', phoneNumber);
          } else {
            log('Warning: dataLayer not available for phone click tracking');
          }
        });
      });

      // Track email clicks
      const emailLinks = document.querySelectorAll('a[href^="mailto:"]');
      log(`Found ${emailLinks.length} email links`);
      
      emailLinks.forEach(link => {
        link.addEventListener('click', () => {
          const email = link.getAttribute('href');
          log('Email click detected', email);
          
          if (typeof window.dataLayer !== 'undefined') {
            window.dataLayer.push({
              'event': 'email_click',
              'email_address': email,
              'engagement_type': 'email'
            });
            log('Email click event sent to GTM', email);
          } else {
            log('Warning: dataLayer not available for email click tracking');
          }
        });
      });

      // Track form submissions
      const forms = document.querySelectorAll('form');
      log(`Found ${forms.length} forms`);
      
      forms.forEach(form => {
        form.addEventListener('submit', (e) => {
          const formId = form.getAttribute('id') || 'unnamed_form';
          log('Form submission detected', formId);
          
          if (typeof window.dataLayer !== 'undefined') {
            window.dataLayer.push({
              'event': 'form_submission',
              'form_id': formId,
              'form_type': formId.includes('quote') ? 'quote' : (formId.includes('contact') ? 'contact' : 'other')
            });
            log('Form submission event sent to GTM', formId);
            
            // Track as quote_request if it's a quote form
            if (formId.includes('quote')) {
              window.dataLayer.push({
                'event': 'quote_request',
                'form_id': formId,
                'request_type': 'quote'
              });
              log('Quote request event sent to GTM', formId);
            }
            
            // Track as conversion if it's a quote or contact form
            if (formId.includes('quote') || formId.includes('contact')) {
              window.dataLayer.push({
                'event': 'conversion',
                'conversion_type': formId.includes('quote') ? 'quote_form' : 'contact_form',
                'form_id': formId
              });
              log('Conversion event sent to GTM', formId);
            }
          } else {
            log('Warning: dataLayer not available for form tracking');
          }
        });
      });

    // Track CTA button clicks
    const ctaButtons = document.querySelectorAll('.bg-blue-600, .bg-green-600, .bg-blue-700');
    ctaButtons.forEach(button => {
      button.addEventListener('click', () => {
        const buttonText = button.textContent || button.innerText;
        if (typeof window.dataLayer !== 'undefined') {
          window.dataLayer.push({
            'event': 'cta_click',
            'event_category': 'engagement',
            'event_label': buttonText.trim(),
            'value': 1
          });
        }
      });
    });

    // Track pricing calculator usage
    const pricingInputs = document.querySelectorAll('#calc-duration, #calc-units, #calc-location, #calc-urgent');
    pricingInputs.forEach(input => {
      input.addEventListener('change', () => {
        if (typeof window.dataLayer !== 'undefined') {
          window.dataLayer.push({
            'event': 'pricing_calculator_interaction',
            'event_category': 'calculator',
            'event_label': input.id,
            'value': input.value
          });
        }
      });
    });

    // Track outbound links
    const externalLinks = document.querySelectorAll('a[href^="http"]:not([href*="cctvtrailer.com"])');
    externalLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (typeof window.dataLayer !== 'undefined') {
          window.dataLayer.push({
            'event': 'outbound_click',
            'event_category': 'engagement',
            'event_label': link.getAttribute('href'),
            'transport_type': 'beacon'
          });
        }
      });
    });

    // Track scroll depth (25%, 50%, 75%, 90%, 100%)
    let scrollDepthTracked = {25: false, 50: false, 75: false, 90: false, 100: false};
    
    function trackScrollDepth() {
      const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;
      const scrolled = window.scrollY;
      const scrollPercentage = Math.round((scrolled / scrollHeight) * 100);
      
      [25, 50, 75, 90, 100].forEach(depth => {
        if (scrollPercentage >= depth && !scrollDepthTracked[depth]) {
          scrollDepthTracked[depth] = true;
          if (typeof window.dataLayer !== 'undefined') {
            window.dataLayer.push({
              'event': 'scroll_depth',
              'event_category': 'engagement',
              'event_label': `${depth}%`,
              'value': depth
            });
          }
        }
      });
    }
    
    // Throttle scroll tracking
    let scrollTimer;
    window.addEventListener('scroll', () => {
      if (scrollTimer) clearTimeout(scrollTimer);
      scrollTimer = setTimeout(trackScrollDepth, 100);
    });

    // Track time on page (every 30 seconds)
    let timeOnPage = 0;
    setInterval(() => {
      timeOnPage += 30;
      if (typeof window.dataLayer !== 'undefined' && timeOnPage % 60 === 0) {
        window.dataLayer.push({
          'event': 'time_on_page',
          'event_category': 'engagement',
          'event_label': `${timeOnPage} seconds`,
          'value': timeOnPage
        });
      }
    }, 30000);

      // Track page visibility changes
      document.addEventListener('visibilitychange', () => {
        if (typeof window.dataLayer !== 'undefined') {
          window.dataLayer.push({
            'event': 'visibility_change',
            'event_category': 'engagement',
            'event_label': document.hidden ? 'hidden' : 'visible'
          });
        }
      });
      
      log('Analytics initialization complete');
    }
    
    // Defer analytics initialization to improve performance
    function deferAnalytics() {
      // Initialize on first user interaction
      const initOnInteraction = () => {
        if (!analyticsInitialized) {
          if (typeof window.dataLayer !== 'undefined') {
            initializeAnalytics();
          } else {
            // Wait for dataLayer then initialize
            setTimeout(() => {
              if (typeof window.dataLayer !== 'undefined') {
                initializeAnalytics();
              }
            }, 500);
          }
        }
        // Remove listeners after initialization
        ['scroll', 'touchstart', 'mousemove', 'keydown'].forEach(event => {
          document.removeEventListener(event, initOnInteraction, { once: true });
        });
      };

      // Use requestIdleCallback if available, otherwise use timeout
      if ('requestIdleCallback' in window) {
        requestIdleCallback(() => {
          if (typeof window.dataLayer !== 'undefined') {
            initializeAnalytics();
          }
        }, { timeout: 2000 });
      } else {
        // Fallback: Initialize after 2 seconds
        setTimeout(() => {
          if (typeof window.dataLayer !== 'undefined') {
            initializeAnalytics();
          }
        }, 2000);
      }

      // Also initialize on first user interaction
      ['scroll', 'touchstart', 'mousemove', 'keydown'].forEach(event => {
        document.addEventListener(event, initOnInteraction, { once: true });
      });
    }

    // Start when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', deferAnalytics);
    } else {
      deferAnalytics();
    }
  }
</script>