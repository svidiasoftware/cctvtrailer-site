---
// Component for optimized script loading
---

<!-- Defer Google Tag Manager to improve initial load performance -->
<script>
  // Initialize consent mode with denied defaults to prevent cookies
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}

  // Default consent mode - deny all cookies initially
  gtag('consent', 'default', {
    'ad_storage': 'denied',
    'analytics_storage': 'denied',
    'ad_user_data': 'denied',
    'ad_personalization': 'denied',
    'functionality_storage': 'granted',
    'personalization_storage': 'granted',
    'security_storage': 'granted'
  });

  // Configure to use cookieless pings
  gtag('set', 'allow_google_signals', false);
  gtag('set', 'allow_ad_personalization_signals', false);

  // Defer GTM loading until user interaction or idle time
  (function() {
    let gtmLoaded = false;

    function loadGTM() {
      if (gtmLoaded) return;
      gtmLoaded = true;

      (function(w,d,s,l,i){
        w[l]=w[l]||[];
        w[l].push({'gtm.start': new Date().getTime(), event:'gtm.js'});
        var f=d.getElementsByTagName(s)[0],
            j=d.createElement(s),
            dl=l!='dataLayer'?'&l='+l:'';
        j.async=true;
        j.defer=true;
        j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;
        f.parentNode.insertBefore(j,f);
      })(window,document,'script','dataLayer','GTM-5FPMNFLV');
    }

    // Load on user interaction
    const initOnInteraction = () => {
      loadGTM();
      ['scroll', 'touchstart', 'mousemove', 'click'].forEach(event => {
        document.removeEventListener(event, initOnInteraction);
      });
    };

    // Use requestIdleCallback if available
    if ('requestIdleCallback' in window) {
      requestIdleCallback(loadGTM, { timeout: 3000 });
    } else {
      // Fallback to setTimeout
      setTimeout(loadGTM, 3000);
    }

    // Also load on first user interaction
    ['scroll', 'touchstart', 'mousemove', 'click'].forEach(event => {
      document.addEventListener(event, initOnInteraction, { once: true, passive: true });
    });
  })();
</script>

<!-- Intersection Observer for lazy loading -->
<script>
  // Lazy load images when they come into viewport
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          img.classList.remove('loading');
          observer.unobserve(img);
        }
      });
    });

    document.addEventListener('DOMContentLoaded', () => {
      const lazyImages = document.querySelectorAll('img[loading="lazy"]');
      lazyImages.forEach(img => {
        img.classList.add('loading');
        imageObserver.observe(img);
      });
    });
  }
</script>

<!-- Preconnect to critical third-party origins -->
<link rel="preconnect" href="https://fonts.googleapis.com" crossorigin />
<link rel="preconnect" href="https://www.google-analytics.com" crossorigin />