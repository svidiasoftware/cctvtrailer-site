---
export interface HowToSchemaProps {
  name: string;
  description: string;
  totalTime?: string;
  estimatedCost?: {
    value?: string;
    currency?: string;
  };
  supply?: string[];
  tool?: string[];
  steps: Array<{
    name: string;
    text: string;
    image?: string;
    url?: string;
  }>;
  image?: string;
  video?: {
    name?: string;
    description?: string;
    thumbnailUrl?: string;
    uploadDate?: string;
    duration?: string;
    contentUrl?: string;
  };
}

const {
  name,
  description,
  totalTime,
  estimatedCost,
  supply = [],
  tool = [],
  steps,
  image,
  video
} = Astro.props as HowToSchemaProps;

const schemaObject: any = {
  "@context": "https://schema.org",
  "@type": "HowTo",
  "name": name,
  "description": description
};

if (totalTime) {
  schemaObject.totalTime = totalTime;
}

if (estimatedCost) {
  schemaObject.estimatedCost = {
    "@type": "MonetaryAmount",
    "currency": estimatedCost.currency || "USD",
    "value": estimatedCost.value
  };
}

if (supply.length > 0) {
  schemaObject.supply = supply.map(item => ({
    "@type": "HowToSupply",
    "name": item
  }));
}

if (tool.length > 0) {
  schemaObject.tool = tool.map(item => ({
    "@type": "HowToTool",
    "name": item
  }));
}

schemaObject.step = steps.map((step, index) => {
  const stepSchema: any = {
    "@type": "HowToStep",
    "name": step.name,
    "text": step.text,
    "position": index + 1
  };

  if (step.image) {
    stepSchema.image = step.image;
  }

  if (step.url) {
    stepSchema.url = step.url;
  }

  return stepSchema;
});

if (image) {
  schemaObject.image = image;
}

if (video) {
  schemaObject.video = {
    "@type": "VideoObject",
    "name": video.name,
    "description": video.description,
    "thumbnailUrl": video.thumbnailUrl,
    "uploadDate": video.uploadDate,
    "duration": video.duration,
    "contentUrl": video.contentUrl
  };
}

const schema = JSON.stringify(schemaObject);
---

<script type="application/ld+json" set:html={schema} />